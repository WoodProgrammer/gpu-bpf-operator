
#!/usr/bin/env bpftrace
/* nvidia_driver.bt - Monitor NVIDIA proprietary GPU driver activity */

BEGIN
{
    printf("Tracing NVIDIA GPU driver activity... Hit Ctrl-C to end.\n");
    printf("%-12s %-18s %-16s %-8s %-8s %-20s\n", "TIME(ms)", "EVENT", "COMM", "PID", "GPU_ID", "DETAILS");
}

{{- if contains "nvidia_open" .ProbeLib }}

kprobe:nvidia_open
{
    printf("%-12llu %-18s %-16s %-8d %-8s %s\n",
           elapsed / 1000000, "OPEN", comm, pid, "-", "GPU device opened");
    @opens[comm] = count();
    @open_pids[pid] = 1;
}

kretprobe:nvidia_open
{
    if (retval < 0) {
        printf("%-12llu %-18s %-16s %-8d %-8s error=%d\n",
               elapsed / 1000000, "OPEN_FAILED", comm, pid, "-", retval);
        @open_errors = count();
        @open_errors_by_process[comm] = count();
    }
}
{{- end }}

{{- if contains "nvidia_unlocked_ioctl" .ProbeLib }}

kprobe:nvidia_unlocked_ioctl
{
    @ioctl_count = count();
    @ioctls_per_process[comm] = count();
    @ioctl_start[tid] = nsecs;

    /* Decode IOCTL command type */
    $cmd = arg1;
    $type = ($cmd >> 8) & 0xFF;
    @ioctl_types[$type] = count();

    if (rand % 50 == 0) {
        printf("%-12llu %-18s %-16s %-8d %-8s type=0x%02x cmd=0x%lx\n",
               elapsed / 1000000, "IOCTL", comm, pid, "-", $type, $cmd);
    }
}

kretprobe:nvidia_unlocked_ioctl
{
    if (@ioctl_start[tid]) {
        $duration = nsecs - @ioctl_start[tid];
        @ioctl_latency_us = hist($duration / 1000);

        /* Track slow IOCTLs (>10ms) */
        if ($duration > 10000000) {
            @slow_ioctls = count();
            printf("%-12llu %-18s %-16s %-8d %-8s duration=%llu us\n",
                   elapsed / 1000000, "IOCTL_SLOW", comm, pid, "-", $duration / 1000);
        }

        delete(@ioctl_start[tid]);
    }

    /* Track IOCTL errors */
    if (retval < 0) {
        @ioctl_errors = count();
        @ioctl_errors_by_process[comm] = count();
        printf("%-12llu %-18s %-16s %-8d %-8s error=%d\n",
               elapsed / 1000000, "IOCTL_ERROR", comm, pid, "-", retval);
    }
}

{{- end }}


{{- if contains "nvidia_mmap" .ProbeLib }}
kprobe:nvidia_mmap
{
    @mmap_count = count();
    @total_mmap_bytes = sum(arg2);
    @mmap_bytes_per_process[comm] = sum(arg2);
    @mmap_size_histogram = hist(arg2);

    printf("%-12llu %-18s %-16s %-8d %-8s offset=0x%lx size=%lu\n",
           elapsed / 1000000, "MMAP", comm, pid, "-", arg1, arg2);
}

kretprobe:nvidia_mmap
{
    if (retval < 0) {
        @mmap_errors = count();
        printf("%-12llu %-18s %-16s %-8d %-8s error=%d\n",
               elapsed / 1000000, "MMAP_FAILED", comm, pid, "-", retval);
    }
}
{{- end }}

{{- if contains "nvidia_isr" .ProbeLib }}

kprobe:nvidia_isr
{
    @isr_count = count();
    @last_isr_time = nsecs;
}
{{- end }}

{{- if contains "nvidia_isr_kthread_bh" .ProbeLib }}

kprobe:nvidia_isr_kthread_bh
{
    @isr_bh_count = count();
    if (@last_isr_time > 0) {
        @isr_latency_us = hist((nsecs - @last_isr_time) / 1000);
    }
}
{{- end }}


END
{
    printf("\n=== NVIDIA GPU Driver Statistics ===\n");

    /* Device Operations */
    printf("\n--- Device Operations ---\n");
    printf("Opens by process:\n");
    print(@opens);
    printf("\nOpen errors by process:\n");
    print(@open_errors_by_process);
    printf("\nActive GPU processes (still open):\n");
    print(@open_pids);

    /* IOCTL Operations */
    printf("\n--- IOCTL Operations ---\n");
    printf("IOCTL types distribution:\n");
    print(@ioctl_types);
    printf("\nTop IOCTL callers:\n");
    print(@ioctls_per_process);
    printf("\nIOCTL latency distribution (microseconds):\n");
    print(@ioctl_latency_us);
    printf("\nIOCTL errors by process:\n");
    print(@ioctl_errors_by_process);

    /* Memory Operations */
    printf("\n--- Memory Operations ---\n");
    printf("Memory mapped per process (bytes):\n");
    print(@mmap_bytes_per_process);
    printf("\nMMAP size distribution:\n");
    print(@mmap_size_histogram);

    /* Interrupt Handling */
    printf("\n--- Interrupt Handling ---\n");
    printf("ISR latency distribution (microseconds):\n");
    print(@isr_latency_us);

    /* Cleanup all maps */
    clear(@open_errors); clear(@open_errors_by_process);
    clear(@ioctl_count); clear(@ioctls_per_process); clear(@ioctl_types);
    clear(@ioctl_latency_us); clear(@ioctl_start); clear(@slow_ioctls);
    clear(@ioctl_errors); clear(@ioctl_errors_by_process);
    clear(@mmap_count); clear(@total_mmap_bytes); clear(@mmap_bytes_per_process);
    clear(@mmap_size_histogram); clear(@mmap_errors);
    clear(@isr_count); clear(@isr_bh_count); clear(@isr_latency_us);
    clear(@last_isr_time);
}
