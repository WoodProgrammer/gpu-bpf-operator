#!/usr/bin/env bpftrace

/*
 * cuda_events.bt  Trace CUDA events using bpftrace and uprobes.
 *
 * This script traces key CUDA API functions to provide visibility into:
 * - Memory operations (cudaMalloc, cudaFree, cudaMemcpy)
 * - Kernel launches (cudaLaunchKernel)
 * - Stream operations (cudaStreamCreate, cudaStreamSynchronize)
 * - Device management (cudaGetDevice, cudaSetDevice)
 * 
 * USAGE: sudo ./cuda_events.bt
 *
 * This requires:
 * - bpftrace
 * - CUDA toolkit installed (with libcudart.so)
 *
 * Note: You need to modify the library path in each probe definition if the
 * default "/usr/lib/x86_64-linux-gnu/libcudart.so" doesn't exist on your system.
 * Search and replace all occurrences with your system's CUDA library path.
 */

BEGIN
{
    printf("Tracing CUDA events... Hit Ctrl-C to end.\n");
    printf("%-12s %-16s %-12s %-20s %s\n", "TIME(ms)", "PROCESS", "PID", "EVENT", "DETAILS");
    printf("Using CUDA library: {{.LibPath}}\n");
    printf("If this path is incorrect, please edit the script and update all probe definitions.\n");
}

{{- if contains "cudaMalloc" .ProbeLib }}
// Memory allocation tracking

uprobe:{{.LibPath}}:cudaMalloc
{
    $size = arg1;
    printf("%-12u %-16s %-12d %-20s size=%ld bytes\n", 
           elapsed/1000000, comm, pid, "cudaMalloc", $size);
}
uretprobe:{{.LibPath}}:cudaMalloc
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaMalloc", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}


// Memory free
{{- if contains "cudaFree" .ProbeLib }}
uprobe:{{.LibPath}}:cudaFree
{
    printf("%-12u %-16s %-12d %-20s ptr=0x%lx\n", 
           elapsed/1000000, comm, pid, "cudaFree", arg0);
}
uretprobe:{{.LibPath}}:cudaFree
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaFree", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaFree" .ProbeLib }}

// Memory copy
uprobe:{{.LibPath}}:cudaMemcpy
{
    $size = arg3;
    printf("%-12u %-16s %-12d %-20s size=%ld bytes, kind=%d\n", 
           elapsed/1000000, comm, pid, "cudaMemcpy", $size, arg4);
}

uretprobe:{{.LibPath}}:cudaMemcpy
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaMemcpy", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaFree" .ProbeLib }}

// Kernel launches
uprobe:{{.LibPath}}:cudaLaunchKernel
{
    printf("%-12u %-16s %-12d %-20s function=0x%lx\n", 
           elapsed/1000000, comm, pid, "cudaLaunchKernel", arg0);
}

uretprobe:{{.LibPath}}:cudaLaunchKernel
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaLaunchKernel", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaStreamCreate" .ProbeLib }}

// Stream operations
uprobe:{{.LibPath}}:cudaStreamCreate
{
    printf("%-12u %-16s %-12d %-20s\n", 
           elapsed/1000000, comm, pid, "cudaStreamCreate");
}

uretprobe:{{.LibPath}}:cudaStreamCreate
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaStreamCreate", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaStreamSynchronize" .ProbeLib }}

uprobe:{{.LibPath}}:cudaStreamSynchronize
{
    printf("%-12u %-16s %-12d %-20s stream=0x%lx\n", 
           elapsed/1000000, comm, pid, "cudaStreamSynchronize", arg0);
}

uretprobe:{{.LibPath}}:cudaStreamSynchronize
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaStreamSynchronize", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaGetDevice" .ProbeLib }}
// Device management
uprobe:{{.LibPath}}:cudaGetDevice
{
    printf("%-12u %-16s %-12d %-20s\n", 
           elapsed/1000000, comm, pid, "cudaGetDevice");
}

uretprobe:{{.LibPath}}:cudaGetDevice
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaGetDevice", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaSetDevice" .ProbeLib }}
uprobe:{{.LibPath}}:cudaSetDevice
{
    printf("%-12u %-16s %-12d %-20s device=%d\n", 
           elapsed/1000000, comm, pid, "cudaSetDevice", arg0);
}

uretprobe:{{.LibPath}}:cudaSetDevice
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaSetDevice", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaEventCreate" .ProbeLib }}
// Event operations
uprobe:{{.LibPath}}:cudaEventCreate
{
    printf("%-12u %-16s %-12d %-20s\n", 
           elapsed/1000000, comm, pid, "cudaEventCreate");
}

uretprobe:{{.LibPath}}:cudaEventCreate
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaEventCreate", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaEventRecord" .ProbeLib }}
uprobe:{{.LibPath}}:cudaEventRecord
{
    printf("%-12u %-16s %-12d %-20s event=0x%lx\n", 
           elapsed/1000000, comm, pid, "cudaEventRecord", arg0);
}

uretprobe:{{.LibPath}}:cudaEventRecord
{
    $ret = retval;
    printf("%-12u %-16s %-12d %-20s returned=%d (%s)\n", 
           elapsed/1000000, comm, pid, "cudaEventRecord", $ret, 
           $ret == 0 ? "success" : "error");
}
{{- end }}

{{- if contains "cudaEventSynchronize" .ProbeLib }}
uprobe:{{.LibPath}}:cudaEventSynchronize
{
    printf("%-12u %-16s %-12d %-20s event=0x%lx\n", 
           elapsed/1000000, comm, pid, "cudaEventSynchronize", arg0);
}


{{- end }}

END
{
    printf("Tracing complete.\n");
} 